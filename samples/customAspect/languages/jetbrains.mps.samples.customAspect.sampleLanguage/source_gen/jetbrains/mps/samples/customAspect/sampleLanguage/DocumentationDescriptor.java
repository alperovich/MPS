package jetbrains.mps.samples.customAspect.sampleLanguage;

/*Generated by MPS */

import com.mbeddr.doc.aspect.runtime.IDocumentationAspectDescriptor;
import org.jetbrains.mps.openapi.model.SNode;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.ModuleRepositoryFacade;
import jetbrains.mps.smodel.Language;
import org.jetbrains.mps.openapi.persistence.PersistenceFacade;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.internal.collections.runtime.CollectionSequence;
import org.jetbrains.mps.openapi.model.SModel;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SModuleOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import com.mbeddr.doc.aspect.runtime.DocumentationAspectHelper;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SModelOperations;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.AttributeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.IAttributeDescriptor;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;

public class DocumentationDescriptor implements IDocumentationAspectDescriptor {

  public SNode getDocumentation(SAbstractConcept concept, String property) {
    ModuleRepositoryFacade repositoryFacade = ModuleRepositoryFacade.getInstance();
    Language currentLanguage = repositoryFacade.getModule(PersistenceFacade.getInstance().createModuleReference("4ac0b19e-3e88-4e61-bab3-507ba2cceae8(jetbrains.mps.samples.customAspect.sampleLanguage)"), Language.class);

    Iterable<Language> languages = Sequence.fromIterable(Sequence.<Language>singleton(currentLanguage)).concat(CollectionSequence.fromCollection(repositoryFacade.getAllExtendingLanguages(currentLanguage)));

    for (Language language : Sequence.fromIterable(languages)) {
      SModel model = SModuleOperations.getAspect(language, SPropertyOperations.getString(SNodeOperations.getNode("r:e361f9f2-2afa-4fbe-b895-bdd4fbfe44fa(com.mbeddr.doc.aspect.plugin)", "8077410651477855181"), MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name")));
      SNode element = DocumentationAspectHelper.findDocumentationElement(model, concept, property);
      if (element != null) {
        return element;
      }
    }

    return null;
  }

  private SNode findDocumentationElement(SModel model, SAbstractConcept concept) {
    SNode section = lookupDocumentationSection(model, concept);
    if ((section == null)) {
      for (SAbstractConcept superConcept : ListSequence.fromList(SConceptOperations.getAllSuperConcepts(concept, false))) {
        SNode superSection = lookupDocumentationSection(model, superConcept);
        if ((superSection != null)) {
          return superSection;
        }
      }
    }
    return section;
  }
  private SNode lookupDocumentationSection(SModel model, final SAbstractConcept concept) {
    return ListSequence.fromList(SModelOperations.nodes(model, MetaAdapterFactory.getConcept(0x2374bc907e3741f1L, 0xa9c4c2e35194c36aL, 0x2e7fd03a4b7c6cc7L, "com.mbeddr.doc.structure.Section"))).findFirst(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return AttributeOperations.getAttribute(it, new IAttributeDescriptor.NodeAttribute(MetaAdapterFactory.getConcept(0x38a074ede5ad4b2dL, 0xbe31ca436911b8aaL, 0xeb09589d997ab9eL, "com.mbeddr.doc.aspect.structure.DocumentedConceptAnnotation"))) != null && SLinkOperations.getTarget(AttributeOperations.getAttribute(it, new IAttributeDescriptor.NodeAttribute(MetaAdapterFactory.getConcept(0x38a074ede5ad4b2dL, 0xbe31ca436911b8aaL, 0xeb09589d997ab9eL, "com.mbeddr.doc.aspect.structure.DocumentedConceptAnnotation"))), MetaAdapterFactory.getReferenceLink(0x38a074ede5ad4b2dL, 0xbe31ca436911b8aaL, 0xeb09589d997ab9eL, 0xeb09589d9984aacL, "concept")) == SNodeOperations.asNode(concept);
      }
    });
  }
}
