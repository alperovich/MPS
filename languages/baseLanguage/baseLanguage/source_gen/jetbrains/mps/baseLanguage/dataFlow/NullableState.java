package jetbrains.mps.baseLanguage.dataFlow;

/*Generated by MPS */


public enum NullableState {
  NULLABLE(),
  NOTNULL(),
  UNKNOWN(),
  NOT_INIT(),
  NULL();

  NullableState() {
  }
  public NullableState merge(NullableState state) {
    if (this.equals(state)) {
      return this;
    }
    if (this.equals(NullableState.NOT_INIT)) {
      return this;
    }
    if (state.equals(NullableState.NOT_INIT)) {
      return state;
    }
    // UNKNOWN is used for baseLanguage extensions, when no custom analyzer rule is specified for Expression extension 
    // and this Expression extension is acts as right part of the assignment i.e  
    // Object var = SMTH 
    // where "SMTH" is extension of baseLanguage Expression 
    // then we can say that var is initialized, so its nullable state is not NOT_INIT 
    // but we cannot certanly say whether it is NULL, NOT_NULL or NULLABLE 
    // Merging UNKNOWN and NULL/NULLABLE leads to NULLABLE  
    // Merging UNKNOWN and NOTNULL leads to UNKNOWN 
    if (state.equals(NullableState.UNKNOWN) && this.equals(NullableState.NOTNULL)) {
      return NullableState.UNKNOWN;
    }
    if (state.equals(NullableState.NOTNULL) && this.equals(NullableState.UNKNOWN)) {
      return NullableState.UNKNOWN;
    }
    return NullableState.NULLABLE;
  }
  public static boolean canBeNull(NullableState state) {
    if (state == null) {
      return false;
    }
    return state.equals(NullableState.NULL) || state.equals(NullableState.NULLABLE);
  }
}
